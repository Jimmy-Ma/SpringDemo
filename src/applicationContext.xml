<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!-- 
		配置bean 
		class: Bean的全类名，通过反射的方式在IOC容器中创建Bean的实例。要求Bean中必须有无参的构造器。
		id: 标示容器中的Bean。id唯一。
	-->
	<bean id="helloWorld" class="com.jimmy.spring.beans.HelloWorld">
		<!-- 
			通过setter方法注入Bean的属性值或依赖的对象
			name属性指定Bean的属性名称
			value属性或<value>子节点指定属性值
		-->
		<property name="name" value="Jimmy"></property>
	</bean>

	<!-- 
		使用构造器注入属性值
		index指定参数的位置
		type指定参数的类型
		以区分重载的构造器
	-->
	<bean id="car" class="com.jimmy.spring.beans.Car">
		<constructor-arg index="0" value="Audi"></constructor-arg>
		<!-- 
			也可以使用<value>子节点设置属性值
			如果字面值包含特殊字符可以用<![CDATA[]]>包裹起来
		 -->
		<constructor-arg index="1">
			<value><![CDATA[<Shanghai^>]]></value>
		</constructor-arg>
		<constructor-arg type="int" value="200"></constructor-arg>
	</bean>
	
	<bean id="car2" class="com.jimmy.spring.beans.Car">
		<constructor-arg value="Ford" type="java.lang.String"></constructor-arg>
		<constructor-arg value="Changan" type="java.lang.String"></constructor-arg>
		<constructor-arg value="200000" type="double"></constructor-arg>
	</bean>
	
	<!-- 
	<bean id="person" class="com.jimmy.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="20"></property>
		<!- 
			使用property的ref属性或<ref>子节点建立bean之间的引用关系
		 ->
		<property name="car" ref="car"></property>
	</bean>
	 -->
	
	<!-- 
	<bean id="person" class="com.jimmy.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="20"></property>
		<!- 
			内部Bean，不能被外部引用。
		 ->
		<property name="car">
			<bean class="com.jimmy.spring.beans.Car">
				<constructor-arg value="Ford" type="java.lang.String"></constructor-arg>
				<constructor-arg value="Changan" type="java.lang.String"></constructor-arg>
				<constructor-arg value="200000" type="double"></constructor-arg>
			</bean>
		</property>
	</bean>	
	 -->
	
	<!--  
	<bean id="person" class="com.jimmy.spring.beans.Person">
		<property name="name" value="Jerry"></property>
		<property name="age" value="15"></property>
		<!- 
			赋值null
		 ->
		<property name="car"><null/></property>
	</bean>
	 -->
	
	<bean id="person" class="com.jimmy.spring.beans.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="20"></property>
		<!-- 
			级联属性赋值
			必须要有相应的setter方法
		 -->
		<property name="car" ref="car"></property>
		<property name="car.price" value="350000"></property>
	</bean>

	<bean id="richPerson" class="com.jimmy.spring.beans.RichPerson">
		<property name="name" value="Mike"></property>
		<property name="age" value="28"></property>
		<!-- 
			使用<list>节点为List类型的属性赋值
			<ref>指定对其他Bean的引用
			<bean>指定内部Bean的定义
		 -->
		<property name="cars">
			<list>
				<ref bean="car"/>
				<bean class="com.jimmy.spring.beans.Car">
					<constructor-arg value="Ford" type="java.lang.String"></constructor-arg>
					<constructor-arg value="Changan" type="java.lang.String"></constructor-arg>
					<constructor-arg value="200000" type="double"></constructor-arg>
				</bean>
			</list>
		</property>
	</bean>
	
	<bean id="richPerson2" class="com.jimmy.spring.beans.RichPerson2">
		<property name="name" value="Rose"></property>
		<property name="age" value="22"></property>
		<!-- 
			使用<map>和<entry>子节点为Map类型的属性赋值
		 -->
		<property name="cars">
			<map>
				<entry key="AA" value-ref="car"></entry>
				<entry key="BB">
					<bean class="com.jimmy.spring.beans.Car">
						<constructor-arg value="Ford" type="java.lang.String"></constructor-arg>
						<constructor-arg value="Changan" type="java.lang.String"></constructor-arg>
						<constructor-arg value="200000" type="double"></constructor-arg>
					</bean>
				</entry>
			</map>
		</property>
	</bean>
	
	<bean id="dataSource" class="com.jimmy.spring.beans.DataSource">
		<!-- 
			使用<props>和<prop>子节点为Properties属性赋值
		 -->
		<property name="properties">
			<props>
				<prop key="user">root</prop>
				<prop key="password">123456</prop>
				<prop key="jdbcUrl">jdbc:mysql///test</prop>
				<prop key="driverClass">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- 
		配置独立的集合Bean，以供多个Bean进行引用，需要导入util命名空间
	 -->
	<util:list id="cars">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	
	<bean id="richPerson3" class="com.jimmy.spring.beans.RichPerson">
		<property name="name" value="Jack"></property>
		<property name="age" value="23"></property>
		<property name="cars" ref="cars"></property>
	</bean>
	
	<!-- 
		通过p命名空间为Bean的属性赋值，需要导入util命名空间，更加简洁
	 -->
	<bean id="richPerson4" class="com.jimmy.spring.beans.RichPerson" 
		p:name="Queen" 
		p:age="18" 
		p:cars-ref="cars">
	</bean>
	
</beans>
